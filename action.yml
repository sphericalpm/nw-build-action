name: nw-build
description: Build distributions of apps based on NW framework
author: Spherical
inputs:
  app:
    description: Package name of the app to build
    required: true
  plugins:
    description: Requirements to add while packaging
    required: false
  index:
    description: Python package index with extra packages
    required: true
  cert-pass:
    description: Certificate password
    required: true
outputs:
  target-file:
    description: Build result file
    value: ${{ steps.build-target.outputs.target-file }}
runs:
  using: composite
  steps:
    -
      name: Install choco
      run: |
        Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      shell: pwsh

    -
      name: Install non-python dependencies
      run: |
        choco install -y imagemagick --side-by-side --version=7.0.11.14 2>&1 >>build.log
      shell: pwsh

    -
      name: Add PATH for non-python dependencies
      run: |
        echo "C:\Program Files\ImageMagick-7.0.11-Q16-HDRI" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    -
      name: Install python prerequisites
      run: |
        pip install wheel
        python -m pip install pip==20.3.4 'setuptools>=40.4.3,<61'
      shell: pwsh

    -
      name: Install nw-builder
      env:
        PIP_EXTRA_INDEX_URL: '${{ inputs.index }}'
      run: pip install --no-use-pep517 nw-builder
      shell: pwsh

    -
      name: Build the target app
      env:
        PIP_EXTRA_INDEX_URL: '${{ inputs.index }}'
      run: |
        import subprocess
        print('Building ${{ inputs.app }}')
        plugins = '${{ inputs.plugins }}'
        if plugins:
          plugins = ' '.join(('-l', *plugins.split()))
        subprocess.check_call((
          *'nw build -p'.split(),
          '${{ inputs.app }}',
          '-c', '${{ inputs.cert-pass }}',
          *plugins.split(),
        ))
      shell: python

    -
      name: Build target
      id: build-target
      run: |
        echo "::set-output name=target-file::$(Get-ChildItem -Path *.exe -Name)"
      shell: pwsh
